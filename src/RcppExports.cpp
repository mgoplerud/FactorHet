// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cpp_beta
Eigen::MatrixXd cpp_beta(const int K, const Eigen::MappedSparseMatrix<double> X, const Rcpp::List E_ridge, const Eigen::Map<Eigen::ArrayXd> y, const Eigen::Map<Eigen::ArrayXd> weights, const Eigen::Map<Eigen::MatrixXd> E_omega, const Eigen::Map<Eigen::MatrixXd> obs_E_prob);
RcppExport SEXP _FactorHet_cpp_beta(SEXP KSEXP, SEXP XSEXP, SEXP E_ridgeSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP E_omegaSEXP, SEXP obs_E_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type E_ridge(E_ridgeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type E_omega(E_omegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type obs_E_prob(obs_E_probSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_beta(K, X, E_ridge, y, weights, E_omega, obs_E_prob));
    return rcpp_result_gen;
END_RCPP
}
// cpp_beta_plain
Eigen::MatrixXd cpp_beta_plain(const int K, const Eigen::MappedSparseMatrix<double> X, const Eigen::MappedSparseMatrix<double> omega, const Eigen::MappedSparseMatrix<double> ridge, const Eigen::Map<Eigen::VectorXd> s);
RcppExport SEXP _FactorHet_cpp_beta_plain(SEXP KSEXP, SEXP XSEXP, SEXP omegaSEXP, SEXP ridgeSEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type ridge(ridgeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_beta_plain(K, X, omega, ridge, s));
    return rcpp_result_gen;
END_RCPP
}
// cg_custom
List cg_custom(const int K, const Eigen::MappedSparseMatrix<double> X, const Eigen::Map<Eigen::MatrixXd> omega, const List list_ridge, const Eigen::Map<Eigen::VectorXd> s, const Eigen::Map<Eigen::MatrixXd> old_beta, const Eigen::Map<Eigen::MatrixXd> weights, const double tol, const int it_max, const int low_dimension);
RcppExport SEXP _FactorHet_cg_custom(SEXP KSEXP, SEXP XSEXP, SEXP omegaSEXP, SEXP list_ridgeSEXP, SEXP sSEXP, SEXP old_betaSEXP, SEXP weightsSEXP, SEXP tolSEXP, SEXP it_maxSEXP, SEXP low_dimensionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const List >::type list_ridge(list_ridgeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type old_beta(old_betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const int >::type it_max(it_maxSEXP);
    Rcpp::traits::input_parameter< const int >::type low_dimension(low_dimensionSEXP);
    rcpp_result_gen = Rcpp::wrap(cg_custom(K, X, omega, list_ridge, s, old_beta, weights, tol, it_max, low_dimension));
    return rcpp_result_gen;
END_RCPP
}
// trace_df_cpp
double trace_df_cpp(const Eigen::MappedSparseMatrix<double> X, const Eigen::Map<Eigen::MatrixXd> beta, const Eigen::MappedSparseMatrix<double> ridge);
RcppExport SEXP _FactorHet_trace_df_cpp(SEXP XSEXP, SEXP betaSEXP, SEXP ridgeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type ridge(ridgeSEXP);
    rcpp_result_gen = Rcpp::wrap(trace_df_cpp(X, beta, ridge));
    return rcpp_result_gen;
END_RCPP
}
// trace_AinvB_sparse
double trace_AinvB_sparse(const Eigen::MappedSparseMatrix<double> A, const Eigen::MappedSparseMatrix<double> B);
RcppExport SEXP _FactorHet_trace_AinvB_sparse(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(trace_AinvB_sparse(A, B));
    return rcpp_result_gen;
END_RCPP
}
// trace_AinvB
double trace_AinvB(const Eigen::MappedSparseMatrix<double> A, const Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _FactorHet_trace_AinvB(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(trace_AinvB(A, B));
    return rcpp_result_gen;
END_RCPP
}
// fast_sparse_df
double fast_sparse_df(const Eigen::MappedSparseMatrix<double> LL, const Eigen::MappedSparseMatrix<double> PR);
RcppExport SEXP _FactorHet_fast_sparse_df(SEXP LLSEXP, SEXP PRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type LL(LLSEXP);
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type PR(PRSEXP);
    rcpp_result_gen = Rcpp::wrap(fast_sparse_df(LL, PR));
    return rcpp_result_gen;
END_RCPP
}
// cpp_moderator_deriv
Rcpp::List cpp_moderator_deriv(const Eigen::Map<Eigen::MatrixXd> W, const Eigen::Map<Eigen::MatrixXd> phi, const bool do_grad, const bool do_hess, const bool do_ln_hess, const bool moderator_grad);
RcppExport SEXP _FactorHet_cpp_moderator_deriv(SEXP WSEXP, SEXP phiSEXP, SEXP do_gradSEXP, SEXP do_hessSEXP, SEXP do_ln_hessSEXP, SEXP moderator_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_grad(do_gradSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_hess(do_hessSEXP);
    Rcpp::traits::input_parameter< const bool >::type do_ln_hess(do_ln_hessSEXP);
    Rcpp::traits::input_parameter< const bool >::type moderator_grad(moderator_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_moderator_deriv(W, phi, do_grad, do_hess, do_ln_hess, moderator_grad));
    return rcpp_result_gen;
END_RCPP
}
// cpp_gradient_phi
Eigen::VectorXd cpp_gradient_phi(const Eigen::Map<Eigen::VectorXd> par, const int K, const Eigen::Map<Eigen::VectorXd> norm_weights, const Eigen::Map<Eigen::VectorXd> weights_W, const Eigen::Map<Eigen::MatrixXd> group_E_prob, const Eigen::Map<Eigen::MatrixXd> W, const Eigen::Map<Eigen::MatrixXd> ridge_penalty, const double gamma, const double rank_F, const double power_pi, const Eigen::Map<Eigen::ArrayXd> b_r, const double lambda);
RcppExport SEXP _FactorHet_cpp_gradient_phi(SEXP parSEXP, SEXP KSEXP, SEXP norm_weightsSEXP, SEXP weights_WSEXP, SEXP group_E_probSEXP, SEXP WSEXP, SEXP ridge_penaltySEXP, SEXP gammaSEXP, SEXP rank_FSEXP, SEXP power_piSEXP, SEXP b_rSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type norm_weights(norm_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights_W(weights_WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type group_E_prob(group_E_probSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type ridge_penalty(ridge_penaltySEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type rank_F(rank_FSEXP);
    Rcpp::traits::input_parameter< const double >::type power_pi(power_piSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_gradient_phi(par, K, norm_weights, weights_W, group_E_prob, W, ridge_penalty, gamma, rank_F, power_pi, b_r, lambda));
    return rcpp_result_gen;
END_RCPP
}
// cpp_obj_phi
double cpp_obj_phi(const Eigen::Map<Eigen::VectorXd> par, const int K, const Eigen::Map<Eigen::VectorXd> norm_weights, const Eigen::Map<Eigen::VectorXd> weights_W, const Eigen::Map<Eigen::MatrixXd> W, const Eigen::Map<Eigen::MatrixXd> group_E_prob, const Eigen::Map<Eigen::MatrixXd> ridge_penalty, const double gamma, const double rank_F, const double power_pi, const Eigen::Map<Eigen::ArrayXd> b_r, const double lambda);
RcppExport SEXP _FactorHet_cpp_obj_phi(SEXP parSEXP, SEXP KSEXP, SEXP norm_weightsSEXP, SEXP weights_WSEXP, SEXP WSEXP, SEXP group_E_probSEXP, SEXP ridge_penaltySEXP, SEXP gammaSEXP, SEXP rank_FSEXP, SEXP power_piSEXP, SEXP b_rSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type par(parSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type norm_weights(norm_weightsSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type weights_W(weights_WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type W(WSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type group_E_prob(group_E_probSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type ridge_penalty(ridge_penaltySEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type rank_F(rank_FSEXP);
    Rcpp::traits::input_parameter< const double >::type power_pi(power_piSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::ArrayXd> >::type b_r(b_rSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_obj_phi(par, K, norm_weights, weights_W, W, group_E_prob, ridge_penalty, gamma, rank_F, power_pi, b_r, lambda));
    return rcpp_result_gen;
END_RCPP
}
// calculate_nullspace_basis
Eigen::SparseMatrix<double> calculate_nullspace_basis(const Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _FactorHet_calculate_nullspace_basis(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_nullspace_basis(X));
    return rcpp_result_gen;
END_RCPP
}
// rank_sparse
int rank_sparse(const Eigen::MappedSparseMatrix<double> X);
RcppExport SEXP _FactorHet_rank_sparse(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MappedSparseMatrix<double> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(rank_sparse(X));
    return rcpp_result_gen;
END_RCPP
}
// softmax_matrix
Eigen::MatrixXd softmax_matrix(const Eigen::MatrixXd X);
RcppExport SEXP _FactorHet_softmax_matrix(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(softmax_matrix(X));
    return rcpp_result_gen;
END_RCPP
}
// sparse_diag
Eigen::SparseMatrix<double> sparse_diag(Eigen::ArrayXd m);
RcppExport SEXP _FactorHet_sparse_diag(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_diag(m));
    return rcpp_result_gen;
END_RCPP
}
// logpi_adjust
Eigen::MatrixXd logpi_adjust(const Eigen::Map<Eigen::MatrixXd> X, const Eigen::ArrayXd logpi);
RcppExport SEXP _FactorHet_logpi_adjust(SEXP XSEXP, SEXP logpiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::ArrayXd >::type logpi(logpiSEXP);
    rcpp_result_gen = Rcpp::wrap(logpi_adjust(X, logpi));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FactorHet_cpp_beta", (DL_FUNC) &_FactorHet_cpp_beta, 7},
    {"_FactorHet_cpp_beta_plain", (DL_FUNC) &_FactorHet_cpp_beta_plain, 5},
    {"_FactorHet_cg_custom", (DL_FUNC) &_FactorHet_cg_custom, 10},
    {"_FactorHet_trace_df_cpp", (DL_FUNC) &_FactorHet_trace_df_cpp, 3},
    {"_FactorHet_trace_AinvB_sparse", (DL_FUNC) &_FactorHet_trace_AinvB_sparse, 2},
    {"_FactorHet_trace_AinvB", (DL_FUNC) &_FactorHet_trace_AinvB, 2},
    {"_FactorHet_fast_sparse_df", (DL_FUNC) &_FactorHet_fast_sparse_df, 2},
    {"_FactorHet_cpp_moderator_deriv", (DL_FUNC) &_FactorHet_cpp_moderator_deriv, 6},
    {"_FactorHet_cpp_gradient_phi", (DL_FUNC) &_FactorHet_cpp_gradient_phi, 12},
    {"_FactorHet_cpp_obj_phi", (DL_FUNC) &_FactorHet_cpp_obj_phi, 12},
    {"_FactorHet_calculate_nullspace_basis", (DL_FUNC) &_FactorHet_calculate_nullspace_basis, 1},
    {"_FactorHet_rank_sparse", (DL_FUNC) &_FactorHet_rank_sparse, 1},
    {"_FactorHet_softmax_matrix", (DL_FUNC) &_FactorHet_softmax_matrix, 1},
    {"_FactorHet_sparse_diag", (DL_FUNC) &_FactorHet_sparse_diag, 1},
    {"_FactorHet_logpi_adjust", (DL_FUNC) &_FactorHet_logpi_adjust, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_FactorHet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
